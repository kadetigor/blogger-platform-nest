import { Injectable, NotFoundException, UnauthorizedException } from "@nestjs/common";
import { CommentsRepository } from "../infrastructure/comments.repository";
import { CommentsLikesRepository } from "../infrastructure/comments-likes.repository";
import { CreateCommentInputDto } from "../api/input-dto.ts/create-comment.input-dto";
import { Comment } from "../domain/comment.entity";
import { CommentViewDto } from "../api/view-dto.ts/comment.view-dto";
import { UpdateCommentDto } from "../dto/update-comment.dto";
import { PostsExternalQueryRepository } from "../../posts/infrastructure/external-query/posts.external-query-repository";
import { CommentatorInfo } from "../domain/schemas/commentor-info.schema";

@Injectable()
export class CommentsExtertalService {

  constructor(
    private commentsRepository: CommentsRepository,
    private commentsLikesRepository: CommentsLikesRepository,
    private postsExternalQueryRepository: PostsExternalQueryRepository,
  ) { }

  async createComment(postId: string, dto: CreateCommentInputDto, user: {id: string, login: string}): Promise<CommentViewDto> {

    if (!user) {
        throw new UnauthorizedException('no user found')
      }

    // Check if post exists using the posts service
    try {
      await this.postsExternalQueryRepository.getPostById(postId);
    } catch (error) {
      throw new NotFoundException('post not found');
    }

    const newComment = new Comment(
      '',  // ID will be generated by database
      dto.content,
      new CommentatorInfo(user.id, user.login),
      postId
    );

    const comment = await this.commentsRepository.createComment(newComment)

    const likesInfo = await this.commentsLikesRepository.getLikesInfo(comment.id, user.id);

    const commentViewModel = CommentViewDto.mapToView(comment, likesInfo);

    return commentViewModel;
  }

  async updateComment(id: string, dto: UpdateCommentDto): Promise<void> {
      await this.commentsRepository.updateComment(id, dto)
      return;
    }
}
